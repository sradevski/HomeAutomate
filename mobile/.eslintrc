{
  "parser": "babel-eslint",
  "extends": ["eslint:recommended", "plugin:react/recommended"],
  "env": {
    "jest": true,
    "es6": true
  },
  "plugins": [
    "react",
    "react-native"
  ],
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "rules": {
    #TODO: overrides over the recommended. delete in production
    "react/prop-types": 0,
    "no-unused-vars": 0,
    "no-console": 0,

    #BEST PRACTICES
    "default-case": 1, #Always require a default case in switch.
    "no-caller": 1, #disallow the use of arguments.caller or arguments.callee.
    "curly": 1, #Consistent curly usage.
    "dot-location": ["error", "property"], #Ensure the dot is on the same line as the property being accessed/called.
    "dot-notation": 2, #Encourages using bla.foo rather than bla["foo"] whenever possible (accessing with a variable such as bla[name] is ok).
    "eqeqeq": 2, #require the use of === and !==.
    "no-extra-bind": 1, #disallow unnecessary calls to .bind().
    "no-eval": 2, #disallow the use of 'eval'
    "no-floating-decimal": 2, #disallow leading or trailing decimal points in numeric literals
    "no-implied-eval": 2, #disallow the use of eval()-like methods
    "no-loop-func": 2, #disallow function declarations and expressions inside loop statements
    "no-lone-blocks": 2, #disallow unnecessary nested blocks
    "no-multi-spaces": 1, #disallow multiple spaces
    "no-new-wrappers": 2, #disallow new operators with the String, Number, and Boolean objects
    "no-proto":2, #disallow use of __proto__
    "no-return-assign": 1, #disallow assignment operators in return statements,
    "no-script-url": 2, #disallow javascript urls
    "no-self-compare": 2, #disallow comparisons where both sides are exactly the same
    "no-sequences": 2, #disallow comma operators
    "no-unmodified-loop-condition": 2, #disallow unmodified loop conditions, like no increment in a while loop
    "no-useless-call": 2, #disallow unnecessary calls to .call() and .apply()
    "no-useless-concat": 1, #disallow unnecessary concatenation of literals or template literals
    "no-useless-escape": 1, #disallow unnecessary escape characters
    "no-useless-return": 1, #disallow redundant return statements
    "no-void": 2, #disallow void operators
    "no-with": 2, #disallow with statements
    "radix": ["error", "as-needed"], #enforce the consistent use of the radix argument when using parseInt(). as-needed makes sure the redundant ,10) in parseInt is not used in modern environments
    "yoda": 1, #makes sure of a consistent usage of the ordering in conditions where the variable always comes before the literal.

    #VARIABLES
    "no-undef-init": 1, #disallow the use of variables before they are defined

    #STYLISTIC ISSUES
    "block-spacing": 1, #enforce consistent spacing inside single-line blocks
    "brace-style": ["warn", "1tbs", { "allowSingleLine": true }], #enforce consistent brace style for blocks
    "camelcase": 1, #enforce camelcase naming convention
    "comma-spacing": 1, #enforce consistent spacing before and after commas
    "comma-style": 1, #enforce consistent comma style
    "computed-property-spacing": 1, #enforce consistent spacing inside computed property brackets
    "func-call-spacing": 1, #require or disallow spacing between function identifiers and their invocations
    "func-style": ["warn", "declaration", { "allowArrowFunctions": true }], #enforce the consistent use of either function declarations or expressions
    "jsx-quotes": ["warn", "prefer-single"], #enforce the consistent use of either double or single quotes in JSX attributes
    "key-spacing": 1, #enforce consistent spacing between keys and values in object literal properties
    "keyword-spacing": 1, #enforce consistent spacing before and after keywords
    "linebreak-style": 1, #enforce consistent linebreak style
    "max-depth": 1, #enforce a maximum depth that blocks can be nested
    "max-nested-callbacks": ["warn", 3], #enforce a maximum depth that callbacks can be nested
    "max-params": ["warn", 4], #enforce a maximum number of parameters in function definitions
    "max-statements-per-line": ["warn", { "max": 2 }], #enforce a maximum number of statements allowed per line
    "max-statements":  ["warn", 16], #enforce a maximum number of statements allowed in function blocks
    "no-lonely-if": 1, #disallow if statements as the only statement in else blocks
    "no-multiple-empty-lines": 1, #disallow multiple empty lines, default 2
    "no-nested-ternary": 1, #disallow nested ternary expressions
    "no-trailing-spaces": 1, #disallow trailing whitespace at the end of lines
    "no-unneeded-ternary": 1, #disallow ternary operators when simpler alternatives exist
    "no-whitespace-before-property": 1, #disallow whitespace before properties
    "operator-linebreak": ["warn", "after"], #enforce consistent linebreak style for operators
    "padded-blocks": ["warn", "never"], #require or disallow padding within blocks
    "quotes": ["warn", "single", { "allowTemplateLiterals": true }], #enforce the consistent use of either backticks, double, or single quotes
    "semi": 1, #require or disallow semicolons instead of ASI

    #ES6
    "arrow-body-style": 1, #require braces around arrow function bodies
    "arrow-parens": 1, #require parentheses around arrow function arguments
    "arrow-spacing": 1, #enforce consistent spacing before and after the arrow in arrow functions
    "no-duplicate-imports": 1, #disallow duplicate module imports
    "no-useless-constructor": 1, #disallow unnecessary constructors
    "no-useless-rename": 1, #disallow renaming import, export, and destructured assignments to the same name
    "no-var": 2, #require let or const instead of var
    "object-shorthand": 1, #require or disallow method and property shorthand syntax for object literals
    "prefer-const":  ["off", {"destructuring": "all"}], #require const declarations for variables that are never reassigned after declared
    "prefer-rest-params": 1,  #require rest parameters instead of arguments
    "prefer-spread": 1, #require spread operators instead of .apply()
    "prefer-template": 1, #require template literals instead of string concatenation

    #TODO: Once project is mature:
    #"no-magic-numbers": 1, #disallow magic numbers
    #"no-empty-function": 2,
    #maybe this one to aid readability: http://eslint.org/docs/rules/no-implicit-coercion
    #this one will make the code more functional programming-like, but doesn't allow modifications which are sometimes helpful for performance. http://eslint.org/docs/rules/no-param-reassign
    #"no-unused-expressions": 2, #disallow unused expressions
    # Might be a good rule to add over time http://eslint.org/docs/rules/id-blacklist
    # Look into this one later on http://eslint.org/docs/rules/indent
  },
  "globals": {
    "fetch": true,
    "setInterval": true,
    "clearInterval": true,
    "console": true,
    "process": true,
    "setTimeout": true,
    "requestAnimationFrame": true,
    "GLOBAL": true
  }
}
